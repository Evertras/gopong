// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-12-15 16:57:39.6923026 -0800 PST m=+0.004986501
package static

// StaticHtmlIndex is the raw contents of index.html
var StaticHtmlIndex = `<html>
    <head>
        <title>Go Pong</title>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <canvas id="playArea"></canvas>
        <script src="game.js"></script>
    </body>
</html>
`

// StaticJsGame is the raw contents of game.js
var StaticJsGame = `// This is super jank all stuck in one file, imagine a much nicer
// build/generate pipe and actual good code instead... *magic*

window.addEventListener("load", function(evt) {
    const canvas = document.getElementById("playArea");
    const ctx = canvas.getContext("2d");

    // Use this as a multiplier for drawing, will be set to pixel size of canvas
    let currentScale = 1;

    function sizeCanvas() {
        let dim = Math.min(window.innerWidth, window.innerHeight);

        ctx.canvas.height = dim;
        ctx.canvas.width = dim;

        currentScale = dim;
    }

    function drawPaddle(player, pos, heightPercent) {
        // Dealing with [0,1] coordinates
        const width = 0.03;
        const height = heightPercent;
        const x = player === 1 ? 0 : 1-width;
        const y = pos - height*0.5;

        // Convert to actual pixel values here
        ctx.rect(
            x * currentScale,
            y * currentScale,
            width * currentScale,
            height * currentScale);

        ctx.fill();
    }

    function drawBall(x, y, r) {
        // Convert to actual pixel values here
        ctx.arc(
            x * currentScale,
            y * currentScale,
            r * currentScale,
            0,
            2 * Math.PI);

        ctx.fill();
    }

    function drawState(s) {
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.beginPath();
        drawPaddle(1, s.pL.c, s.pL.h);
        drawPaddle(2, s.pR.c, s.pR.h);
        drawBall(s.b.pX, s.b.pY, s.b.r);
    }

    sizeCanvas();

    let ws = new WebSocket("ws://localhost:8000/join");

    // For now, just send some random messages for the server to read
    let i = setInterval(() => {
        let time = new Date();
        ws.send(time);
    }, 5000);

    ws.onopen = function(evt) {
        console.log("OPEN");
    }

    ws.onclose = function(evt) {
        console.log("CLOSE");
        clearInterval(i);
    }

    ws.onmessage = function(evt) {
        let parsed = JSON.parse(evt.data);

        drawState(parsed);
    }

    ws.onerror = function(evt) {
        console.log("ERROR: " + evt.data);
    }
});
`

// StaticCssStyle is the raw contents of style.css
var StaticCssStyle = `/* This is all in one file... imagine a really cool build process *magic* */

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

/* Begin our own style */

body {
    background-color: #222233;
    width: 100%;
    height: 100%;
    overflow: hidden;
}

#playArea {
    background: white;
    display: block;
    margin: 0 auto; /* horizontally center */
}
`